// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommunicatorClient is the client API for Communicator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommunicatorClient interface {
	Upsert(ctx context.Context, opts ...grpc.CallOption) (Communicator_UpsertClient, error)
	Select(ctx context.Context, in *RpcPage, opts ...grpc.CallOption) (Communicator_SelectClient, error)
}

type communicatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunicatorClient(cc grpc.ClientConnInterface) CommunicatorClient {
	return &communicatorClient{cc}
}

func (c *communicatorClient) Upsert(ctx context.Context, opts ...grpc.CallOption) (Communicator_UpsertClient, error) {
	stream, err := c.cc.NewStream(ctx, &Communicator_ServiceDesc.Streams[0], "/rpc.Communicator/Upsert", opts...)
	if err != nil {
		return nil, err
	}
	x := &communicatorUpsertClient{stream}
	return x, nil
}

type Communicator_UpsertClient interface {
	Send(*RpcPort) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type communicatorUpsertClient struct {
	grpc.ClientStream
}

func (x *communicatorUpsertClient) Send(m *RpcPort) error {
	return x.ClientStream.SendMsg(m)
}

func (x *communicatorUpsertClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *communicatorClient) Select(ctx context.Context, in *RpcPage, opts ...grpc.CallOption) (Communicator_SelectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Communicator_ServiceDesc.Streams[1], "/rpc.Communicator/Select", opts...)
	if err != nil {
		return nil, err
	}
	x := &communicatorSelectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Communicator_SelectClient interface {
	Recv() (*RpcPort, error)
	grpc.ClientStream
}

type communicatorSelectClient struct {
	grpc.ClientStream
}

func (x *communicatorSelectClient) Recv() (*RpcPort, error) {
	m := new(RpcPort)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CommunicatorServer is the server API for Communicator service.
// All implementations must embed UnimplementedCommunicatorServer
// for forward compatibility
type CommunicatorServer interface {
	Upsert(Communicator_UpsertServer) error
	Select(*RpcPage, Communicator_SelectServer) error
	mustEmbedUnimplementedCommunicatorServer()
}

// UnimplementedCommunicatorServer must be embedded to have forward compatible implementations.
type UnimplementedCommunicatorServer struct {
}

func (UnimplementedCommunicatorServer) Upsert(Communicator_UpsertServer) error {
	return status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedCommunicatorServer) Select(*RpcPage, Communicator_SelectServer) error {
	return status.Errorf(codes.Unimplemented, "method Select not implemented")
}
func (UnimplementedCommunicatorServer) mustEmbedUnimplementedCommunicatorServer() {}

// UnsafeCommunicatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunicatorServer will
// result in compilation errors.
type UnsafeCommunicatorServer interface {
	mustEmbedUnimplementedCommunicatorServer()
}

func RegisterCommunicatorServer(s grpc.ServiceRegistrar, srv CommunicatorServer) {
	s.RegisterService(&Communicator_ServiceDesc, srv)
}

func _Communicator_Upsert_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CommunicatorServer).Upsert(&communicatorUpsertServer{stream})
}

type Communicator_UpsertServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*RpcPort, error)
	grpc.ServerStream
}

type communicatorUpsertServer struct {
	grpc.ServerStream
}

func (x *communicatorUpsertServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *communicatorUpsertServer) Recv() (*RpcPort, error) {
	m := new(RpcPort)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Communicator_Select_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RpcPage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CommunicatorServer).Select(m, &communicatorSelectServer{stream})
}

type Communicator_SelectServer interface {
	Send(*RpcPort) error
	grpc.ServerStream
}

type communicatorSelectServer struct {
	grpc.ServerStream
}

func (x *communicatorSelectServer) Send(m *RpcPort) error {
	return x.ServerStream.SendMsg(m)
}

// Communicator_ServiceDesc is the grpc.ServiceDesc for Communicator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Communicator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Communicator",
	HandlerType: (*CommunicatorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upsert",
			Handler:       _Communicator_Upsert_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Select",
			Handler:       _Communicator_Select_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc/rpc.proto",
}
